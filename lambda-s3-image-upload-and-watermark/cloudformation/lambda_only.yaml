AWSTemplateFormatVersion: 2010-09-09
Description: Creates 2 S3 Buckets and 1 IAM Role for Lambda

# Input Parameter go here
Parameters:
  EnvironmentName:
    Description: Will be used as name for all Resources (use lowercase)
    Type: String

# All Resources go here
Resources:
  # S3 Buckets

  # Static Website Bucket
  S3PublicBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub ${EnvironmentName}-public-${AWS::AccountId}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, HEAD]
          AllowedOrigins: ['*']
          Id: CORSrule01  

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3PublicBucket
                - /*
      Bucket: !Ref S3PublicBucket
  
  # Private, Encyrpted Bucket
  S3PrivateBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub ${EnvironmentName}-private-${AWS::AccountId}
      AccessControl: BucketOwnerFullControl
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, PUT, HEAD, POST]
          AllowedOrigins: ['*']
          Id: CORSrule01
          
  # Lambda Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub lambda_${EnvironmentName}_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub lambda_basic-exec_${EnvironmentName}_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: !Sub lambda_s3-access_${EnvironmentName}_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - !Sub ${S3PrivateBucket.Arn}
            - !Sub ${S3PrivateBucket.Arn}/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            Resource: !Sub ${S3PublicBucket.Arn}/*
        
# Outputs go here
Outputs:
  LambdaRoleArn: 
    Description: ARN of the Lambda Role
    Value: !GetAtt LambdaExecutionRole.Arn
  StaticWebsiteURL:
    Description: URL for the static webiste
    Value: !GetAtt S3PublicBucket.WebsiteURL
  StaticWebsiteBucketName:
    Description: Name of the static webiste Bucket
    Value: !Sub ${EnvironmentName}-public-${AWS::AccountId}
  StaticWebsiteBucket:
    Description: ARN of the static website Bucket
    Value: !GetAtt S3PublicBucket.Arn
  PrivateBucketName:
    Description: Name of the private Bucket
    Value: !Sub ${EnvironmentName}-private-${AWS::AccountId}
  PrivateBucket:
    Description: ARN of the private Bucket
    Value: !GetAtt S3PrivateBucket.Arn
    